using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Authentication
{
    public class FileItem
    {
        #region Data Members

        private string _filePath; // the name of the file on the disk
        private string _name; // display name of the file
        private DateTime _created; // date created
        private DateTime _modified; // date in which it was last modified

        #endregion

        #region Properties

        public string FilePath
        {
            get { return _filePath; }
        }

        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        public DateTime Created
        {
            get { return _created; }
        }

        public DateTime Modified
        {
            get { return _modified; }
        }

        #endregion

        #region Constructors

        /// <summary>
        /// DO NOT USE.
        /// Default constructor.
        /// </summary>
        private FileItem()
        {
            _filePath = string.Empty;
            _name = string.Empty;
            _created = DateTime.MinValue;
            _modified = DateTime.MinValue;
        }

        public FileItem(string fileName)
        {
            _filePath = fileName;
            _name = string.Empty; // will be generated by load func
            _created = DateTime.Now;
            _modified = DateTime.Now;

            LoadContents();
        }

        #endregion

        // loads contents from disk - modifies self data if no file found
        private void LoadContents()
        {
            FileStream file;

            try
            {
                file = new FileStream(_filePath, FileMode.Open);
            }
            catch // no file found
            {
                _created = DateTime.Now;
                _modified = DateTime.Now;
                _name = "New File";
                SaveContents(string.Empty); // create the file
                return;
            }            

            // parse file and load contents
            using (StreamReader reader = new StreamReader(file))
            {
                string encryptedName = reader.ReadLine();
                // use hashed filepath as IV for AES encryption
                _name = Encryption.Decrypt(Hashing.StringToHash(encryptedName), Hashing.Hash(_filePath));

                string encryptedCreated = reader.ReadLine();
                string decryptedCreated = Encryption.Decrypt(Hashing.StringToHash(encryptedCreated), Hashing.Hash(_filePath));
                _created = DateTime.Parse(decryptedCreated);
                
                string encryptedModified = reader.ReadLine();
                string decryptedModified = Encryption.Decrypt(Hashing.StringToHash(encryptedModified), Hashing.Hash(_filePath));
                _modified = DateTime.Parse(decryptedModified);
            }
        }

        public void SaveContents(string contents)
        {
            try
            {
                using (var file = new FileStream(_filePath, FileMode.Open))
                {
                    file.SetLength(0); // clear file
                    file.Close();
                }
            }
            catch // create a new file
            {
                File.Create(_filePath).Close();
            }

            using (var file = new StreamWriter(_filePath))
            {
                file.WriteLine(Hashing.HashToString(Encryption.Encrypt(_name, Hashing.Hash(_filePath))));
                file.WriteLine(Hashing.HashToString(Encryption.Encrypt(_created.ToString(), Hashing.Hash(_filePath))));
                file.WriteLine(Hashing.HashToString(Encryption.Encrypt(DateTime.Now.ToString(), Hashing.Hash(_filePath))));

                if (string.Compare(contents, string.Empty) != 0)
                {
                    file.Write(Hashing.HashToString(Encryption.Encrypt(contents, Hashing.Hash(_filePath))));
                }
                file.Close();
            }
        }

        // returns a streamreader to the user generated contents of the file
        public StreamReader GetFileContents()
        {
            FileStream file;

            try
            {
                file = new FileStream(_filePath, FileMode.Open);
            }
            catch // no file found
            {
                throw new Exception("File not found!");
            }

            return new StreamReader(file);
        }
    }
}
